"use strict";(self.webpackChunksocial_labs=self.webpackChunksocial_labs||[]).push([[727],{8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>d});var a=n(6540);const s={},r=a.createContext(s);function i(e){const o=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:o},e.children)}},8804:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"Docker/cap-3","title":"03 - Imagens","description":"At\xe9 que enfim! Agora vamos aprender a criar nossas pr\xf3prias imagens Docker. Com elas, podemos desenvolver containers personalizados e come\xe7ar a dominar o poder do Docker. \ud83d\udca1","source":"@site/cursos/Docker/cap03.md","sourceDirName":"Docker","slug":"/Docker/cap-3","permalink":"/docs/en/cursos/Docker/cap-3","draft":false,"unlisted":false,"editUrl":"https://github.com/SocialSoftwareLivingLab/docs/tree/main/site_source/cursos/Docker/cap03.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"cap-3","title":"03 - Imagens","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"02 - Primeiros comandos","permalink":"/docs/en/cursos/Docker/primeiros-comandos"},"next":{"title":"04 - Reposit\xf3rio de imagens","permalink":"/docs/en/cursos/Docker/cap-4"}}');var s=n(4848),r=n(8453);const i={id:"cap-3",title:"03 - Imagens",sidebar_position:3},d="Cap\xedtulo 3: Imagens Autorais \ud83d\ude80",c={},l=[{value:"Dockerfile: A Receita M\xe1gica \ud83e\uddd1\u200d\ud83c\udf73",id:"dockerfile-a-receita-m\xe1gica-",level:2},{value:"Criando o Projeto",id:"criando-o-projeto",level:3},{value:"O Dockerfile",id:"o-dockerfile",level:3},{value:"\ud83d\udcdd Coment\xe1rios",id:"-coment\xe1rios",level:2},{value:"\ud83d\udee0\ufe0f Imagens Base",id:"\ufe0f-imagens-base",level:2},{value:"\ud83d\udcc2 Definindo o Local de Trabalho",id:"-definindo-o-local-de-trabalho",level:2},{value:"\ud83d\udce6 Inserindo Arquivos no Container",id:"-inserindo-arquivos-no-container",level:2},{value:"\ud83d\udd27 Rodando Comandos",id:"-rodando-comandos",level:2},{value:"\ud83c\udf10 Expondo Portas",id:"-expondo-portas",level:2},{value:"\ud83d\ude80 Definindo o Ponto de Entrada",id:"-definindo-o-ponto-de-entrada",level:2},{value:"\ud83d\udeab Ignorando Arquivos",id:"-ignorando-arquivos",level:2},{value:"\ud83d\udea7 Construindo a Imagem",id:"-construindo-a-imagem",level:2},{value:"\ud83d\udee0\ufe0f Rodando o Container",id:"\ufe0f-rodando-o-container",level:2},{value:"\ud83c\udf89 Parab\xe9ns!",id:"-parab\xe9ns",level:2}];function t(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"cap\xedtulo-3-imagens-autorais-",children:"Cap\xedtulo 3: Imagens Autorais \ud83d\ude80"})}),"\n",(0,s.jsxs)(o.p,{children:["At\xe9 que enfim! Agora vamos aprender a ",(0,s.jsx)(o.strong,{children:"criar nossas pr\xf3prias imagens Docker"}),". Com elas, podemos desenvolver containers personalizados e come\xe7ar a dominar o poder do Docker. \ud83d\udca1"]}),"\n",(0,s.jsx)(o.h2,{id:"dockerfile-a-receita-m\xe1gica-",children:"Dockerfile: A Receita M\xe1gica \ud83e\uddd1\u200d\ud83c\udf73"}),"\n",(0,s.jsxs)(o.p,{children:["Para criar nossas imagens, vamos utilizar um arquivo especial chamado ",(0,s.jsx)(o.code,{children:"Dockerfile"}),". Isso mesmo, ",(0,s.jsx)(o.strong,{children:"sem extens\xe3o"})," e com esse nome exato! O ",(0,s.jsx)(o.code,{children:"Dockerfile"})," cont\xe9m uma linguagem de script pr\xf3pria e funciona como uma ",(0,s.jsx)(o.strong,{children:"receita"})," para a cria\xe7\xe3o da imagem. E a imagem, por sua vez, \xe9 a base do container. Vamos aprender a criar uma imagem simples para um servidor Node.js."]}),"\n",(0,s.jsx)(o.h3,{id:"criando-o-projeto",children:"Criando o Projeto"}),"\n",(0,s.jsxs)(o.p,{children:["Abra um terminal e crie um diret\xf3rio para o nosso exemplo. Dentro dele, crie o arquivo ",(0,s.jsx)(o.code,{children:"app.js"})," com o c\xf3digo do nosso servidor:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-nodejs",children:'const express = require("express");\nconst app = express();\n\nconst PORT = process.env.PORT || 3000;\n\napp.get("/", (req, res) => {\n    res.send("Hello, Docker! \ud83d\ude80");\n});\n\napp.listen(PORT, () => {\n    console.log(`Servidor rodando na porta ${PORT}`);\n});\n'})}),"\n",(0,s.jsx)(o.p,{children:"Em seguida, inicie o gerenciamento de depend\xeancias:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-sh",children:"npm init\n"})}),"\n",(0,s.jsx)(o.p,{children:"Voc\xea ver\xe1 algo assim no final:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-json",children:'{\n  "name": "example-app",\n  "version": "1.0.0",\n  "main": "app.js",\n  "scripts": {\n    "test": "echo \'Error: no test specified\' && exit 1"\n  },\n  "author": "",\n  "license": "ISC",\n  "description": "",\n  "dependencies": {\n    "express": "^4.21.2"\n  }\n}\n'})}),"\n",(0,s.jsxs)(o.p,{children:["Agora, adicione o ",(0,s.jsx)(o.strong,{children:"Express"})," como depend\xeancia de desenvolvimento:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-sh",children:"npx add-dependencies --dev express\n"})}),"\n",(0,s.jsx)(o.h3,{id:"o-dockerfile",children:"O Dockerfile"}),"\n",(0,s.jsxs)(o.p,{children:["Agora, vamos para a parte interessante! Crie um arquivo chamado ",(0,s.jsx)(o.code,{children:"Dockerfile"})," que vai definir o que nosso container precisa para funcionar. O Dockerfile especifica desde a imagem base at\xe9 as instru\xe7\xf5es para instalar depend\xeancias e executar a aplica\xe7\xe3o."]}),"\n",(0,s.jsx)(o.p,{children:"Crie o arquivo com o comando:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-sh",children:"touch Dockerfile\n"})}),"\n",(0,s.jsx)(o.p,{children:"Dentro dele, cole o seguinte conte\xfado:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-Dockerfile",children:'# Usa a imagem oficial do Node.js\nFROM node:18-alpine\n\n# Define o diret\xf3rio de trabalho dentro do container\nWORKDIR /app\n\n# Copia os arquivos para o container\nCOPY . .\n\n# Instala as depend\xeancias\nRUN npm install\n\n# Exp\xf5e a porta que o app ir\xe1 rodar\nEXPOSE 3000\n\n# Comando para iniciar a aplica\xe7\xe3o\nCMD ["node", "app.js"]\n'})}),"\n",(0,s.jsx)(o.p,{children:"Agora, vamos destrinchar cada parte desse arquivo!"}),"\n",(0,s.jsx)(o.h2,{id:"-coment\xe1rios",children:"\ud83d\udcdd Coment\xe1rios"}),"\n",(0,s.jsxs)(o.p,{children:["Tudo que vem ap\xf3s um ",(0,s.jsx)(o.code,{children:"#"})," \xe9 um ",(0,s.jsx)(o.strong,{children:"coment\xe1rio"})," e n\xe3o afeta a constru\xe7\xe3o da imagem. Use-os sempre que quiser explicar alguma coisa no seu script!"]}),"\n",(0,s.jsx)(o.h2,{id:"\ufe0f-imagens-base",children:"\ud83d\udee0\ufe0f Imagens Base"}),"\n",(0,s.jsxs)(o.p,{children:["Ao criar nossa imagem, podemos ",(0,s.jsx)(o.strong,{children:"herdar"})," de outra imagem, como \xe9 o caso da imagem ",(0,s.jsx)(o.code,{children:"node:18-alpine"}),":"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-Dockerfile",children:"FROM node:18-alpine\n"})}),"\n",(0,s.jsx)(o.p,{children:"Isso cria um container com o Node.js j\xe1 instalado. E voc\xea pode escolher qualquer outra imagem que atenda \xe0 sua aplica\xe7\xe3o!"}),"\n",(0,s.jsx)(o.admonition,{type:"tip",children:(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Dica:"})," Sempre que poss\xedvel, tente usar imagens ",(0,s.jsx)(o.strong,{children:"alpine"}),". Elas s\xe3o mais leves, o que faz a constru\xe7\xe3o do container ser mais r\xe1pida e eficiente!"]})}),"\n",(0,s.jsx)(o.h2,{id:"-definindo-o-local-de-trabalho",children:"\ud83d\udcc2 Definindo o Local de Trabalho"}),"\n",(0,s.jsx)(o.p,{children:"Dentro do container, a estrutura de pastas funciona como uma m\xe1quina virtual. Podemos definir o diret\xf3rio onde as opera\xe7\xf5es subsequentes ocorrer\xe3o:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-Dockerfile",children:"WORKDIR /app\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Isso significa que todas as opera\xe7\xf5es subsequentes (como ",(0,s.jsx)(o.code,{children:"COPY"}),", ",(0,s.jsx)(o.code,{children:"RUN"}),", etc.) ocorrer\xe3o dentro do diret\xf3rio ",(0,s.jsx)(o.code,{children:"/app"}),"."]}),"\n",(0,s.jsx)(o.h2,{id:"-inserindo-arquivos-no-container",children:"\ud83d\udce6 Inserindo Arquivos no Container"}),"\n",(0,s.jsxs)(o.p,{children:["Para que os arquivos do nosso projeto cheguem ao container, usamos o comando ",(0,s.jsx)(o.code,{children:"COPY"}),":"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-Dockerfile",children:"COPY . .\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Isso copia tudo do diret\xf3rio atual para dentro do container. Como definimos o diret\xf3rio de trabalho como ",(0,s.jsx)(o.code,{children:"/app"}),", os arquivos ser\xe3o colocados l\xe1."]}),"\n",(0,s.jsx)(o.h2,{id:"-rodando-comandos",children:"\ud83d\udd27 Rodando Comandos"}),"\n",(0,s.jsx)(o.p,{children:"Quando estamos criando a imagem, podemos executar comandos no container. Um exemplo disso \xe9 a instala\xe7\xe3o das depend\xeancias:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-Dockerfile",children:"RUN npm install\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Esse comando roda dentro do container para instalar as depend\xeancias descritas no ",(0,s.jsx)(o.code,{children:"package.json"}),"."]}),"\n",(0,s.jsx)(o.h2,{id:"-expondo-portas",children:"\ud83c\udf10 Expondo Portas"}),"\n",(0,s.jsx)(o.p,{children:"Para que o container possa se comunicar com o mundo exterior, precisamos expor uma porta. No nosso caso, a porta 3000:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-Dockerfile",children:"EXPOSE 3000\n"})}),"\n",(0,s.jsx)(o.p,{children:"Assim, o container estar\xe1 acess\xedvel atrav\xe9s da porta 3000."}),"\n",(0,s.jsx)(o.h2,{id:"-definindo-o-ponto-de-entrada",children:"\ud83d\ude80 Definindo o Ponto de Entrada"}),"\n",(0,s.jsx)(o.p,{children:"Sempre que o container iniciar, podemos definir um comando que ser\xe1 executado automaticamente. Como estamos criando um servidor, queremos que ele inicie sempre que o container rodar:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-Dockerfile",children:'CMD ["node", "app.js"]\n'})}),"\n",(0,s.jsxs)(o.p,{children:["Isso executa o comando ",(0,s.jsx)(o.code,{children:"node app.js"})," quando o container for iniciado. A sintaxe \xe9 como se fosse uma lista (array), onde cada parte do comando \xe9 um item."]}),"\n",(0,s.jsx)(o.h2,{id:"-ignorando-arquivos",children:"\ud83d\udeab Ignorando Arquivos"}),"\n",(0,s.jsxs)(o.p,{children:["\xc0s vezes, n\xe3o queremos que certos arquivos sejam copiados para o container. Crie um arquivo ",(0,s.jsx)(o.code,{children:".dockerignore"})," com o seguinte conte\xfado:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-sh",children:"node_modules\nnpm-debug.log\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Isso garante que, por exemplo, a pasta ",(0,s.jsx)(o.code,{children:"node_modules"})," n\xe3o seja copiada para dentro do container. Temos um comportamento\nsemelhante ao ",(0,s.jsx)(o.code,{children:".gitignore"}),"."]}),"\n",(0,s.jsx)(o.h2,{id:"-construindo-a-imagem",children:"\ud83d\udea7 Construindo a Imagem"}),"\n",(0,s.jsxs)(o.p,{children:["Agora que temos o ",(0,s.jsx)(o.code,{children:"Dockerfile"}),", podemos construir nossa imagem com o comando:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-sh",children:"docker build -t my-node-app .\n"})}),"\n",(0,s.jsx)(o.admonition,{type:"warning",children:(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Importante:"})," O comando ",(0,s.jsx)(o.code,{children:"docker build -t <nome_da_imagem> ."}),' deve ser executado no mesmo diret\xf3rio onde o seu Dockerfile est\xe1. Caso contr\xe1rio, o Docker n\xe3o encontrar\xe1 o arquivo de constru\xe7\xe3o. Se o arquivo n\xe3o estiver no mesmo diret\xf3rio, ent\xe3o\npodemos substituir o "." pelo caminho at\xe9 o Dockerfile']})}),"\n",(0,s.jsxs)(o.p,{children:["Aqui, ",(0,s.jsx)(o.code,{children:"my-node-app"})," \xe9 o nome da imagem e ",(0,s.jsx)(o.code,{children:"."})," indica que o Dockerfile est\xe1 no diret\xf3rio atual."]}),"\n",(0,s.jsx)(o.h2,{id:"\ufe0f-rodando-o-container",children:"\ud83d\udee0\ufe0f Rodando o Container"}),"\n",(0,s.jsx)(o.p,{children:"Agora que nossa imagem est\xe1 criada, podemos ver todas as imagens dispon\xedveis com:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-sh",children:"docker images\n"})}),"\n",(0,s.jsxs)(o.p,{children:["Para rodar o container, use o comando ",(0,s.jsx)(o.code,{children:"docker run"}),":"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-sh",children:"docker run -p 3000:3000 my-node-app\n"})}),"\n",(0,s.jsx)(o.p,{children:"Isso mapeia a porta 3000 do seu container para a porta 3000 da m\xe1quina local."}),"\n",(0,s.jsx)(o.hr,{}),"\n",(0,s.jsx)(o.h2,{id:"-parab\xe9ns",children:"\ud83c\udf89 Parab\xe9ns!"}),"\n",(0,s.jsxs)(o.p,{children:["Agora voc\xea tem um ",(0,s.jsx)(o.strong,{children:"container personalizado"})," rodando uma aplica\xe7\xe3o Node.js! Acesse sua aplica\xe7\xe3o em ",(0,s.jsx)(o.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," e veja o ",(0,s.jsx)(o.strong,{children:'"Hello, Docker!"'}),"."]}),"\n",(0,s.jsx)(o.hr,{}),"\n",(0,s.jsx)(o.admonition,{type:"warning",children:(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Aten\xe7\xe3o:"})," Lembre-se de sempre testar seu Dockerfile localmente antes de tentar us\xe1-lo em um ambiente de produ\xe7\xe3o. Isso ajuda a evitar surpresas."]})})]})}function p(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}}}]);