"use strict";(self.webpackChunksocial_labs=self.webpackChunksocial_labs||[]).push([[760],{7317:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>t});const a=JSON.parse('{"type":"mdx","permalink":"/docs/articles/docker","source":"@site/src/pages/articles/docker.md","title":"Docker e Conteineriza\xe7\xe3o","description":"O Docker \xe9 uma ferramenta que permite a cria\xe7\xe3o de containers, que s\xe3o um isolamento de aplica\xe7\xe3o e depend\xeancias. Basicamente, busca","frontMatter":{},"unlisted":false}');var s=o(4848),r=o(8453);const i={},c="Docker e Conteineriza\xe7\xe3o",d={},t=[{value:"<em>Volumes</em>",id:"volumes",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"docker-e-conteineriza\xe7\xe3o",children:"Docker e Conteineriza\xe7\xe3o"})}),"\n",(0,s.jsx)(n.p,{children:"O Docker \xe9 uma ferramenta que permite a cria\xe7\xe3o de containers, que s\xe3o um isolamento de aplica\xe7\xe3o e depend\xeancias. Basicamente, busca\nisolar a aplica\xe7\xe3o de forma que ela rode de forma homog\xeanea em diferentes m\xe1quinas, elimando problemas que podem ser originados por peculiaridades\nde um ambiente espec\xedfico"}),"\n",(0,s.jsx)(n.h1,{id:"como-isso-funciona-na-pr\xe1tica",children:"Como isso funciona na pr\xe1tica?"}),"\n",(0,s.jsx)(n.p,{children:"Vamos criar uma aplica\xe7\xe3o expressjs isolada na pr\xe1tica, em uma pasta 'example-app', crie o arquivo 'server.js' para rodar o servidor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'    const express = require("express");\n    const app = express();\n\n    const PORT = process.env.PORT || 3000;\n\n    app.get("/", (req, res) => {\n        res.send("Hello, Docker! \ud83d\ude80");\n    });\n\n    app.listen(PORT, () => {\n        console.log(`Servidor rodando na porta ${PORT}`);\n    });\n'})}),"\n",(0,s.jsx)(n.p,{children:"Inicie o seu gerenciamento de depend\xeancias com o npm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm init\n"})}),"\n",(0,s.jsx)(n.p,{children:'Para o entrypoint da aplica\xe7\xe3o, especifique "server.js" ao inv\xe9s de "index.js", e apenas aceite as demais configura\xe7\xf5es, ao final, voc\xea ter\xe1\num arquivo package.json, mais ou menos igual a:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "name": "example-app",\n  "version": "1.0.0",\n  "main": "server.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "",\n  "license": "ISC",\n  "description": "",\n  "dependencies": {\n    "express": "^4.21.2"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Adicione o express ao projeto como depend\xeancia de desenvolvimento:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"npx add-dependencies --dev express\n"})}),"\n",(0,s.jsx)(n.p,{children:"Para o pr\xf3ximo passo, ser\xe1 necess\xe1rio a cria\xe7\xe3o do Dockerfile, que \xe9 um arquivo que especifica quais\ns\xe3o as configura\xe7\xf5es do container, como, por exemplo, o que precisa ser instalado, qual imagem utilizar, que arquivos copiar e quais comandos executar. Sem ele, seria necess\xe1rio um trabalho manual a toda hora para iniciar o container. Crie o arquivo chamado 'Dockerfile' com o seguinte conte\xfado:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",children:'# Usa a imagem oficial do Node.js\nFROM node:18-alpine\n\n# Define o diret\xf3rio de trabalho dentro do container\nWORKDIR /app\n\n# Copia os arquivos para o container\nCOPY . .\n\n# Instala as depend\xeancias\nRUN npm install\n\n# Exp\xf5e a porta que o app ir\xe1 rodar\nEXPOSE 3000\n\n# Comando para iniciar a aplica\xe7\xe3o\nCMD ["npm", "start"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Crie um arquivo '.dockerignore' para evitar copiar arquivos desnecess\xe1rios, e insira o seguinte conte\xfado:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-.dockerignore",children:"node_modules\nnpm-debug.log\n"})}),"\n",(0,s.jsx)(n.p,{children:"Contrua a imagem com o seguinte comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -t meu-app-express .\n"})}),"\n",(0,s.jsx)(n.p,{children:"Agora voc\xea finalmente pode iniciar seu container usando o comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -p 3000:3000 meu-app-express\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Com isso, a aplica\xe7\xe3o pode ser acessada em '",(0,s.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),"'"]}),"\n",(0,s.jsx)(n.h1,{id:"monitorando-a-aplica\xe7\xe3o",children:"Monitorando a aplica\xe7\xe3o"}),"\n",(0,s.jsx)(n.p,{children:"Enquanto o container estiver rodando, podemos visualizar os seus logs com o comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker logs <Container id>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Para saber o id do container use"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ATEN\xc7\xc3O"}),": como estamos usando a mesma porta (3000), temos que parar o container caso seja necess\xe1rio subir outro. Por isso, caso alguma hora encontre o erro:"]}),"\n",(0,s.jsx)(n.p,{children:'"Error response from daemon: failed to set up container networking: driver failed programming external connectivity on endpoint"'}),"\n",(0,s.jsx)(n.p,{children:"veja o id dos containers que est\xe3o ativos com"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"docker ps\n"})}),"\n",(0,s.jsx)(n.p,{children:"e pare os containers com o comando"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"docker stop <id-do-container>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"volumes",children:(0,s.jsx)(n.em,{children:"Volumes"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"os containers rodam em um ambiente virtual, o que significa que todos os dados criados s\xe3o perdidos quando o container para, isto \xe9, o container n\xe3o possui estado."}),"\n",(0,s.jsx)(n.li,{children:"contudo, seria muito interessante, termos logs gravados em diret\xf3rio local para facilitar a visualiza\xe7\xe3o e acompanhamento dos nossos containers,\npois a visualiza\xe7\xe3o dos logs por id apenas fica dispon\xedvel enquanto o container estiver executando."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Para isso existe o conceito de Volume"}),". Um volume \xe9 uma conex\xe3o entre um arquivo dentro do container e uma arquivo na m\xe1quina rost, que associa tudo que \xe9 gravado nesse arquivo, tamb\xe9m \xe9 gravado localmente"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Fa\xe7a uma pequena modifica\xe7\xe3o no Dockerfile"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"altere a linha:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'CMD ["node", "server.js"]\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"para"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'CMD ["sh", "-c", "node server.js > logs/log.txt 2>&1"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Isso far\xe1 o servidor escrever os outputs (console.log) e erros em um arquivo log.txt, dentro da pasta logs"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'pare a execu\xe7\xe3o do container com "ctrl + c"'}),"\n",(0,s.jsx)(n.li,{children:"agora recontrua a imagem, j\xe1 que fizemos altera\xe7\xf5es nela"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"docker build -t meu-app-express .\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"inicie um novo container, mas dessa vez, crie um volume, ligando o arquivo de log no ambiente virtual, em um arquivo de log na m\xe1quina host."}),"\n",(0,s.jsx)(n.li,{children:"Observa\xe7\xe3o: agora iremos criar o volume pela linha de comando, mas futuramente esse processo ser\xe1 automatizado com um script de docker-compose"}),"\n",(0,s.jsx)(n.li,{children:"execute o comando:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"docker run -d -p 3000:3000 -v $(pwd)/logs:/app/logs meu-app-express\n"})}),"\n",(0,s.jsx)(n.p,{children:"Explica\xe7\xe3o Parte por Parte desse comando:"}),"\n",(0,s.jsx)(n.p,{children:"1\ufe0f\u20e3 docker run"}),"\n",(0,s.jsx)(n.p,{children:"Comando para criar e rodar um novo container a partir de uma imagem Docker."}),"\n",(0,s.jsx)(n.p,{children:"2\ufe0f\u20e3 -d (detached mode)"}),"\n",(0,s.jsx)(n.p,{children:"Roda o container em modo desacoplado (em segundo plano).\nSem isso, o terminal ficaria preso ao container, exibindo os logs diretamente."}),"\n",(0,s.jsx)(n.p,{children:"3\ufe0f\u20e3 -p 3000:3000 (port mapping)"}),"\n",(0,s.jsx)(n.p,{children:"Mapeia a porta do container para o host, permitindo acesso externo.\n3000:3000 significa:\nA porta 3000 do host (localhost:3000) ser\xe1 redirecionada para a porta 3000 do container.\nSe o app no container estiver escutando na porta 3000, ele ficar\xe1 acess\xedvel no host."}),"\n",(0,s.jsx)(n.p,{children:"4\ufe0f\u20e3 -v $(pwd)/logs:/app/logs (volume binding)"}),"\n",(0,s.jsx)(n.p,{children:"Monta um volume do host dentro do container para persist\xeancia de dados.\n$(pwd)/logs \u2192 Refere-se \xe0 pasta logs/ dentro do diret\xf3rio atual do host.\n/app/logs \u2192 Onde essa pasta ser\xe1 montada dentro do container.\nIsso significa que qualquer arquivo criado em /app/logs dentro do container ser\xe1 salvo na pasta logs/ do host.\nPermite persist\xeancia de logs, mesmo se o container for removido."}),"\n",(0,s.jsx)(n.p,{children:"5\ufe0f\u20e3 meu-app-express"}),"\n",(0,s.jsx)(n.p,{children:"Nome da imagem Docker que ser\xe1 usada para criar o container.\nSe essa imagem n\xe3o existir localmente, o Docker tentar\xe1 baix\xe1-la do Docker Hub ou do seu registro privado."}),"\n",(0,s.jsx)(n.p,{children:'Agora podemos verificar, que em nossa m\xe1quina, o arquivo "logs/log.txt" cont\xe9m os outputs do nosso servidor'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"cat logs/log.txt\n"})}),"\n",(0,s.jsx)(n.h1,{id:"automatiza\xe7\xe3o-do-processo",children:"Automatiza\xe7\xe3o do processo"}),"\n",(0,s.jsx)(n.p,{children:"Existe uma ferramenta chamada docker-compose que nos auxilia a automatizar o processo de cria\xe7\xe3o e gerenciamento de containers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'crie um arquivo "docker-compose.yml" com o seguinte conte\xfado:'}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'version: "3.8"\nservices:\n  app: # nome para o servi\xe7o\n    build: . # especif\xedca o local do Dockerfile\n    container_name: meu-app # nome dado ao container\n    ports:\n      - "3000:3000" # mapeamento de portas, nesse caso mapeia a 3000 local para a 3000 do ambiente virtual\n    volumes:\n      - ./logs:/app/logs # mapeamento de volume como visto anteriormente, mas agora de forma automatizada\n    restart: always  # Reinicia automaticamente em caso de falha\n'})}),"\n",(0,s.jsx)(n.p,{children:"Agora podemos facilmente manipular o container com os seguintes comandos:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"iniciar o container: docker-compose up -d"}),"\n",(0,s.jsx)(n.li,{children:"reiniciar o container: docker-compose restart"}),"\n",(0,s.jsx)(n.li,{children:"parar o container: docker-compose down"}),"\n",(0,s.jsx)(n.li,{children:"parar e remover tudo (containers, imagens, volumes): docker-compose down --volumes"}),"\n",(0,s.jsx)(n.li,{children:'experimente com "docker-compose up -d" para ver o container em funcionamento'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Para esse caso temos apenas um container, ent\xe3o \xe9 apenas um exerc\xedcio did\xe1tico, mas o docker-compose \xe9 usado no mundo real quando temos que gerenciar mais de um container, nesse caso ele \xe9 extremamente \xfatil"}),"\n",(0,s.jsx)(n.h1,{id:"manipulando-mais-de-um-container",children:"Manipulando mais de um container"}),"\n",(0,s.jsx)(n.p,{children:"Para o pr\xf3ximo passo, iremos utilizar o docker-compose para gerenciar mais de um container, agora iremos interagir com um banco de dados"}),"\n",(0,s.jsx)(n.p,{children:"Instale as depend\xeancias necess\xe1rias para interagir com o banco"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"npx add-dependencies mongoose express cors body-parser\n"})}),"\n",(0,s.jsx)(n.p,{children:"Agora o nosso server ir\xe1 conter um simples CRUD com MongoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const express = require("express");\nconst mongoose = require("mongoose");\nconst cors = require("cors");\nconst bodyParser = require("body-parser");\n\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// Conectar ao MongoDB\nconst MONGO_URI = process.env.MONGO_URI || "mongodb://mongo:27017/meubanco";\n\nmongoose\n  .connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log("\ud83d\udd25 Conectado ao MongoDB!"))\n  .catch((err) => console.error("Erro ao conectar ao MongoDB:", err));\n\n// Definir um modelo (Schema) do MongoDB\nconst ItemSchema = new mongoose.Schema({\n  name: String,\n  description: String,\n});\n\nconst Item = mongoose.model("Item", ItemSchema);\n\n// \ud83d\udccc Criar um novo item (Create)\napp.post("/items", async (req, res) => {\n  try {\n    const newItem = new Item(req.body);\n    await newItem.save();\n    res.status(201).json(newItem);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// \ud83d\udccc Listar todos os itens (Read)\napp.get("/items", async (req, res) => {\n  try {\n    const items = await Item.find();\n    res.json(items);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// \ud83d\udccc Buscar um item por ID (Read)\napp.get("/items/:id", async (req, res) => {\n  try {\n    const item = await Item.findById(req.params.id);\n    if (!item) {\n      return res.status(404).json({ error: "Item n\xe3o encontrado" });\n    }\n    res.json(item);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// \ud83d\udccc Atualizar um item (Update)\napp.put("/items/:id", async (req, res) => {\n  try {\n    const updatedItem = await Item.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n    });\n    if (!updatedItem) {\n      return res.status(404).json({ error: "Item n\xe3o encontrado" });\n    }\n    res.json(updatedItem);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// \ud83d\udccc Deletar um item (Delete)\napp.delete("/items/:id", async (req, res) => {\n  try {\n    const deletedItem = await Item.findByIdAndDelete(req.params.id);\n    if (!deletedItem) {\n      return res.status(404).json({ error: "Item n\xe3o encontrado" });\n    }\n    res.json({ message: "Item deletado com sucesso!" });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Iniciar o servidor\napp.listen(PORT, () => {\n  console.log(`\ud83d\udd25 Servidor rodando na porta ${PORT}`);\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"Modifique o seu 'docker-compose.yml' para conter a cria\xe7\xe3o de um container a partir da imagem do mongodb:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-docker-compose.yml",children:'version: "3.8"\n\nservices:\n  app:\n    build: .\n    container_name: meu-app\n    ports:\n      - "3000:3000"\n    volumes:\n      - ./logs:/app/logs\n    environment:\n      - MONGO_URI=mongodb://mongo:27017/meubanco\n    depends_on:\n      - mongo\n    restart: always\n\n  mongo:\n    image: mongo:6\n    container_name: meu-mongo\n    ports:\n      - "27017:27017"\n    volumes:\n      - mongo-data:/data/db\n    environment:\n      - MONGO_INITDB_DATABASE=meubanco\n    restart: always\n\nvolumes:\n  mongo-data:\n'})}),"\n",(0,s.jsx)(n.p,{children:"Tudo pronto, rode a aplica\xe7\xe3o:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker-compose up -d\n"})}),"\n",(0,s.jsx)(n.p,{children:"Verifique se os dois containers est\xe3o dispon\xedveis:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker ps\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"voc\xea deve ver ao menos dois containers, um com o nome 'meu-app' e outro com o nome 'meu-mongo'"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Por fim, vamos testar o CRUD, agora temos uma aplica\xe7\xe3o completa:"}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udfe2 1. Criar um novo item (POST /items)"}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddea Comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:3000/items \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "Caderno", "description": "Caderno de anota\xe7\xf5es"}\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udce4 Resposta esperada:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "605c72f8e813f5001cfd31d5",\n  "name": "Caderno",\n  "description": "Caderno de anota\xe7\xf5es",\n  "__v": 0\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udd35 2. Listar todos os itens (GET /items)"}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddea Comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:3000/items\n"})}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udce4 Resposta esperada:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "_id": "605c72f8e813f5001cfd31d5",\n    "name": "Caderno",\n    "description": "Caderno de anota\xe7\xf5es",\n    "__v": 0\n  },\n  {\n    "_id": "605c7314e813f5001cfd31d6",\n    "name": "Caneta",\n    "description": "Caneta azul",\n    "__v": 0\n  }\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe1 3. Buscar um item por ID (GET /items/",":id",")"]}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddea Comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl http://localhost:3000/items/605c72f8e813f5001cfd31d5\n\ud83d\udce4 Resposta esperada:\n```json\n{\n  "_id": "605c72f8e813f5001cfd31d5",\n  "name": "Caderno",\n  "description": "Caderno de anota\xe7\xf5es",\n  "__v": 0\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Se o ID n\xe3o existir:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Item n\xe3o encontrado"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udfe0 4. Atualizar um item (PUT /items/",":id",")"]}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddea Comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X PUT http://localhost:3000/items/605c72f8e813f5001cfd31d5 \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "Caderno Atualizado", "description": "Com capa dura"}\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udce4 Resposta esperada:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "605c72f8e813f5001cfd31d5",\n  "name": "Caderno Atualizado",\n  "description": "Com capa dura",\n  "__v": 0\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Se o ID n\xe3o existir:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Item n\xe3o encontrado"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udd34 5. Deletar um item (DELETE /items/",":id",")"]}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddea Comando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X DELETE http://localhost:3000/items/605c72f8e813f5001cfd31d5\n"})}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udce4 Resposta esperada:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Item deletado com sucesso!"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Se o ID n\xe3o existir:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Item n\xe3o encontrado"\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var a=o(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);